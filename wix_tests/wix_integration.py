import httpx
import json
import os
from datetime import datetime
from typing import Optional
from dotenv import load_dotenv

load_dotenv()

class WixDataManager:
    def __init__(self):
        self.site_id = os.getenv("WIX_SITE_ID")
        self.api_key = os.getenv("WIX_API_KEY")
        self.base_url = f"https://www.wixapis.com/wix-data/v2/sites/{self.site_id}"
        self.headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
            "wix-site-id": self.site_id
        }
    
    async def save_upload_to_wix(self, user_id: str, upload_id: str, upload_time: datetime = None) -> Optional[dict]:
        """
        Save upload data to Wix uploads collection
        
        Args:
            user_id (str): The user ID from Wix
            upload_id (str): The upload ID generated by your service
            upload_time (datetime): The time of upload (defaults to current time)
        
        Returns:
            dict: Response from Wix API or None if failed
        """
        if not upload_time:
            upload_time = datetime.utcnow()
        
        # Format the data according to Wix collection fields
        data = {
            "dataItem": {
                "data": {
                    "userId": user_id,
                    "uploadId": upload_id,
                    "time": upload_time.isoformat() + "Z"  # ISO format with Z for UTC
                }
            }
        }
        
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.base_url}/collections/uploads/dataItems",
                    headers=self.headers,
                    json=data,
                    timeout=30.0
                )
                
                if response.status_code == 200 or response.status_code == 201:
                    return response.json()
                else:
                    print(f"Wix API Error: {response.status_code} - {response.text}")
                    return None
                    
        except Exception as e:
            print(f"Error saving to Wix: {str(e)}")
            return None
    
    async def get_upload_by_id(self, upload_id: str) -> Optional[dict]:
        """
        Retrieve upload data from Wix by upload ID
        
        Args:
            upload_id (str): The upload ID to search for
            
        Returns:
            dict: Upload data or None if not found
        """
        try:
            async with httpx.AsyncClient() as client:
                # Query the collection for the specific upload ID
                query = {
                    "filter": {
                        "uploadId": {
                            "$eq": upload_id
                        }
                    }
                }
                
                response = await client.post(
                    f"{self.base_url}/collections/uploads/queryDataItems",
                    headers=self.headers,
                    json=query,
                    timeout=30.0
                )
                
                if response.status_code == 200:
                    result = response.json()
                    if result.get("dataItems") and len(result["dataItems"]) > 0:
                        return result["dataItems"][0]
                    return None
                else:
                    print(f"Wix Query Error: {response.status_code} - {response.text}")
                    return None
                    
        except Exception as e:
            print(f"Error querying Wix: {str(e)}")
            return None
    
    async def get_user_uploads(self, user_id: str) -> list:
        """
        Get all uploads for a specific user
        
        Args:
            user_id (str): The user ID to search for
            
        Returns:
            list: List of upload records for the user
        """
        try:
            async with httpx.AsyncClient() as client:
                query = {
                    "filter": {
                        "userId": {
                            "$eq": user_id
                        }
                    },
                    "sort": [
                        {
                            "fieldName": "time",
                            "order": "DESC"
                        }
                    ]
                }
                
                response = await client.post(
                    f"{self.base_url}/collections/uploads/queryDataItems",
                    headers=self.headers,
                    json=query,
                    timeout=30.0
                )
                
                if response.status_code == 200:
                    result = response.json()
                    return result.get("dataItems", [])
                else:
                    print(f"Wix Query Error: {response.status_code} - {response.text}")
                    return []
                    
        except Exception as e:
            print(f"Error querying user uploads from Wix: {str(e)}")
            return []

# Initialize the Wix manager
wix_manager = WixDataManager()
